"""
Student code for Word Wrangler game
"""

import urllib2
import codeskulptor
import poc_wrangler_provided as provided

WORDFILE = "assets_scrabble_words3.txt"


# Functions to manipulate ordered word lists

def remove_duplicates(list1):
    """
    Eliminate duplicates in a sorted list.

    Returns a new sorted list with the same elements in list1, but
    with no duplicates.

    This function can be iterative.
    """
    temp_list = []
    
    for dummy_item in list1:
        if dummy_item not in temp_list:
            temp_list.append(dummy_item)
            
    return temp_list

def intersect(list1, list2):
    """
    Compute the intersection of two sorted lists.

    Returns a new sorted list containing only elements that are in
    both list1 and list2.

    This function can be iterative.
    """
    temp_list = []
    
    for dummy_item1 in list1:
        if dummy_item1 in list2:
            temp_list.append(dummy_item1)
                
    return temp_list

# Functions to perform merge sort

def merge(list1, list2):
    """
    Merge two sorted lists.

    Returns a new sorted list containing those elements that are in
    either list1 or list2.

    This function can be iterative.
    """   
    temp_list1 = []
    for dummy_item in list1:
        temp_list1.append(dummy_item)
    temp_list2 = []
    for dummy_item in list2:
        temp_list2.append(dummy_item)
    temp_merged = []
    
    if len(temp_list1) == 0:
        return temp_list2
    
    if len(temp_list2) == 0:
        return temp_list1
    
    while len(temp_list1) > 0 and len(temp_list2) > 0:
        if temp_list1[0] < temp_list2[0]:
            temp_merged.append(temp_list1[0])
            temp_list1.pop(0)
        else:
            temp_merged.append(temp_list2[0])
            temp_list2.pop(0)
            
    if temp_list1:
        temp_merged = temp_merged + temp_list1
    else:
        temp_merged = temp_merged + temp_list2
        
    return temp_merged
                
def merge_sort(list1):
    """
    Sort the elements of list1.

    Return a new sorted list with the same elements as list1.

    This function should be recursive.
    """
    if len(list1) <= 1:
        return list1
    
    mid = len(list1) / 2
    
    return merge(merge_sort(list1[mid:]), merge_sort(list1[:mid]))

# Function to generate all strings for the word wrangler game

def gen_all_strings(word):
    """
    Generate all strings that can be composed from the letters in word
    in any order.

    Returns a list of all strings that can be formed from the letters
    in word.

    This function should be recursive.
    """
    if not word:
        return [""]
    else:
        temp_first = word[0]
        temp_rest = gen_all_strings(word[1:])
        temp_rest_copy = list(temp_rest)
        
        
        for dummy_string in temp_rest_copy:
            for dummy_index in range(len(dummy_string)):
                temp_new = dummy_string[:dummy_index] + temp_first + dummy_string[dummy_index:]
                temp_rest.append(temp_new)
            temp_rest.append(dummy_string + temp_first)
            
        return temp_rest
